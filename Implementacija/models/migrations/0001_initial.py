# Generated by Django 4.0.4 on 2022-06-02 19:25

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Korisnik',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('idkor', models.AutoField(db_column='idKor', primary_key=True, serialize=False)),
                ('tipkorisnika', models.CharField(choices=[('osnovni', 'Osnovni korisnik'), ('vip', 'VIP korisnik'), ('admin', 'Administrator')], db_column='tipKorisnika', default='osnovni', max_length=45)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Korisnik',
            },
        ),
        migrations.CreateModel(
            name='Igra',
            fields=[
                ('idigra', models.AutoField(db_column='idIgra', primary_key=True, serialize=False)),
                ('tipigre', models.CharField(choices=[('trening', 'Trening'), ('duel', 'Duel')], max_length=45)),
                ('ishod', models.IntegerField(choices=[(-2, 'U toku'), (-1, 'Igrac 1 pobeda'), (0, 'Nereseno'), (1, 'Igrac 2 pobeda')], default=-2)),
            ],
            options={
                'db_table': 'Igra',
            },
        ),
        migrations.CreateModel(
            name='Rec',
            fields=[
                ('idrec', models.AutoField(db_column='idRec', primary_key=True, serialize=False)),
                ('rec', models.CharField(max_length=45, unique=True)),
                ('tezina', models.IntegerField(choices=[(0, 'Laka rec'), (1, 'Srednja rec'), (2, 'Teska rec')], null=True)),
            ],
            options={
                'db_table': 'rec',
            },
        ),
        migrations.CreateModel(
            name='Igrac',
            fields=[
                ('idkor', models.OneToOneField(db_column='idKor', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('brojpartija', models.IntegerField(db_column='brojPartija')),
                ('brojpobeda', models.IntegerField(db_column='brojPobeda')),
                ('blokiran', models.IntegerField()),
            ],
            options={
                'db_table': 'Igrac',
            },
        ),
        migrations.CreateModel(
            name='Trening',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idigra', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='models.igra')),
                ('idkor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('idrec', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='models.rec')),
            ],
            options={
                'db_table': 'Trening',
            },
        ),
        migrations.CreateModel(
            name='Potez',
            fields=[
                ('idpotez', models.AutoField(db_column='idPotez', primary_key=True, serialize=False)),
                ('slovo', models.CharField(default='#', max_length=1)),
                ('ishod', models.BooleanField()),
                ('idigra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.igra')),
                ('idkor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_idkor+', to=settings.AUTH_USER_MODEL)),
                ('idrec', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_idrec+', to='models.rec')),
            ],
            options={
                'db_table': 'potez',
            },
        ),
        migrations.CreateModel(
            name='Partija',
            fields=[
                ('idigra', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='models.igra')),
                ('first_turn', models.IntegerField(default=1)),
                ('brojzivota1', models.IntegerField(default=6)),
                ('brojzivota2', models.IntegerField(default=6)),
                ('idkor1', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='idkor1', to=settings.AUTH_USER_MODEL)),
                ('idkor2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='idkor2', to=settings.AUTH_USER_MODEL)),
                ('idrec1', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='idrec1', to='models.rec')),
                ('idrec2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='idrec2', to='models.rec')),
            ],
            options={
                'db_table': 'Partija',
            },
        ),
        migrations.CreateModel(
            name='Lobi',
            fields=[
                ('idlobi', models.BigAutoField(primary_key=True, serialize=False)),
                ('ime', models.CharField(default='lobi_default', max_length=30)),
                ('tip', models.CharField(choices=[('osnovni', 'Osnovni korisnik'), ('vip', 'VIP korisnik')], default='osnovni', max_length=30)),
                ('status', models.CharField(choices=[('otvoren', 'Otvoren lobi'), ('u toku', 'Igra u toku'), ('zavrsen', 'Zavrsena igra')], default='otvoren', max_length=30)),
                ('tezina', models.IntegerField(choices=[(0, 'Laka rec'), (1, 'Srednja rec'), (2, 'Teska rec')], null=True)),
                ('idkor1', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_idkor1', to=settings.AUTH_USER_MODEL)),
                ('idkor2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_idkor2', to=settings.AUTH_USER_MODEL)),
                ('idpartija', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_idlobi', to='models.partija')),
            ],
            options={
                'db_table': 'lobi',
            },
        ),
    ]
